package crain.client.view.pages;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import constants.WorldType;
import crain.client.communication.ServerService;
import crain.client.events.SetConfigEvent;
import crain.client.view.events.InitialSettingsEvent;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.context.event.EventListener;
import org.springframework.stereotype.Component;

import javax.swing.*;
import java.awt.*;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.ItemEvent;

@Slf4j
@Component
public class CreateRoomPage {
    private JTextField roomNameInput;
    private JComboBox<String> gameModeSelector;
    private JTextField worldAmountInput;
    private JLabel roomNameLabel;
    private JPasswordField passwordInput;
    private JCheckBox showPassword;
    private JLabel passwordLabel;
    private JLabel worldAmountLabel;
    private JLabel gameModeLabel;
    @Getter
    private JPanel basePanel;
    private JButton createButton;
    @Autowired
    private ApplicationEventPublisher applicationEventPublisher;

    @EventListener
    public void loadInitialSettings(InitialSettingsEvent event) {
        this.roomNameInput.setText(event.gameRoomName());
        this.passwordInput.setText(event.password());
        this.worldAmountInput.setText(event.worldAmount().toString());
        if (event.worldType() == WorldType.COOP) {
            this.gameModeSelector.setSelectedIndex(1);
        } else {
            this.gameModeSelector.setSelectedIndex(0);
        }
    }


    public void setListeners() {
        worldAmountInput.addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                super.focusLost(e);
                try {
                    Integer worldAmount = Integer.valueOf(worldAmountInput.getText());
                    log.debug(String.valueOf(worldAmount));
                    applicationEventPublisher.publishEvent(
                            SetConfigEvent.builder()
                                    .playerAmount(worldAmount)
                                    .worldAmount(worldAmount)
                                    .build());
                } catch (Exception ex) {
                    log.debug("Unknown Exception Occurred", ex);
                }
            }
        });
        roomNameInput.addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                super.focusLost(e);
                applicationEventPublisher.publishEvent(SetConfigEvent.builder().gameRoomName(roomNameInput.getText()).build());
            }
        });
        passwordInput.addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                super.focusLost(e);
                applicationEventPublisher.publishEvent(SetConfigEvent.builder().password(new String(passwordInput.getPassword())).build());
            }
        });
        gameModeSelector.addItemListener(e -> {
            int state = e.getStateChange();
            if (state == ItemEvent.SELECTED && gameModeSelector.getSelectedItem() != null) {
                WorldType worldType = StringUtils.equalsIgnoreCase(gameModeSelector.getSelectedItem().toString(), "Multiworld") ? WorldType.MULTIWORLD : WorldType.COOP;
                applicationEventPublisher.publishEvent(SetConfigEvent.builder().worldType(worldType).build());
            }
        });
        showPassword.addItemListener(e -> {
            int state = e.getStateChange();
            if (state == ItemEvent.SELECTED) {
                passwordInput.setEchoChar('\u0000');
            } else if (state == ItemEvent.DESELECTED) {
                passwordInput.setEchoChar('*');
            }
        });
        createButton.setActionCommand("Create");
        createButton.addActionListener(e -> {
            if ("Create".equals(e.getActionCommand())) {
                applicationEventPublisher.publishEvent(new ServerService.CreateRoomEvent());
            } else {
                log.debug("Action Listener Triggered, but no Action Comment Set.");
            }
        });
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        basePanel = new JPanel();
        basePanel.setLayout(new GridLayoutManager(4, 3, new Insets(10, 0, 10, 10), -1, -1));
        basePanel.setMinimumSize(new Dimension(200, -1));
        basePanel.setPreferredSize(new Dimension(336, 139));
        roomNameLabel = new JLabel();
        roomNameLabel.setHorizontalAlignment(4);
        roomNameLabel.setHorizontalTextPosition(4);
        roomNameLabel.setText("Room Name");
        basePanel.add(roomNameLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(96, -1), null, 0, false));
        roomNameInput = new JTextField();
        basePanel.add(roomNameInput, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        gameModeLabel = new JLabel();
        gameModeLabel.setHorizontalAlignment(4);
        gameModeLabel.setHorizontalTextPosition(4);
        gameModeLabel.setText("Game Mode");
        basePanel.add(gameModeLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(96, -1), null, 0, false));
        basePanel.add(gameModeSelector, new GridConstraints(0, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        worldAmountLabel = new JLabel();
        worldAmountLabel.setHorizontalAlignment(4);
        worldAmountLabel.setHorizontalTextPosition(4);
        worldAmountLabel.setText("World Amount");
        basePanel.add(worldAmountLabel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(96, -1), null, 0, false));
        worldAmountInput = new JTextField();
        basePanel.add(worldAmountInput, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, 1, null, new Dimension(30, -1), null, 0, false));
        passwordInput = new JPasswordField();
        basePanel.add(passwordInput, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, new Dimension(150, -1), null, 0, false));
        showPassword = new JCheckBox();
        showPassword.setText("Unmask");
        basePanel.add(showPassword, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        createButton = new JButton();
        createButton.setText("Create");
        basePanel.add(createButton, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        passwordLabel = new JLabel();
        passwordLabel.setHorizontalAlignment(4);
        passwordLabel.setHorizontalTextPosition(4);
        passwordLabel.setText("Password");
        basePanel.add(passwordLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(96, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return basePanel;
    }

    private void createUIComponents() {
        gameModeSelector = new JComboBox<>(new String[]{"Multiworld", "Coop"});
        gameModeSelector.setSelectedIndex(0);
    }

}
