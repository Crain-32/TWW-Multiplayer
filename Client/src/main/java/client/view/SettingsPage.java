package client.view;

import client.events.CreateMemoryAdapterEvent;
import client.service.SettingsService;
import client.view.events.SettingsChangeEvent;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.stereotype.Component;

import javax.swing.*;
import java.awt.*;
import java.util.Objects;

@Slf4j
@Component
public class SettingsPage {
    private JComboBox<String> connectionTypeSelection;
    private JTextField consoleIpField;
    private JLabel consoleIp;
    private JLabel connectionType;
    private JCheckBox enableExternalIntegration;
    private JButton saveButton;
    @Getter
    private JPanel parentPanel;

    private JFrame parentFrame;

    @Autowired
    private ApplicationEventPublisher applicationEventPublisher;
    @Autowired
    private SettingsService settingsService;

    public void setListeners(JFrame parentFrame) {
        this.parentFrame = parentFrame;
        connectionTypeSelection.setSelectedIndex(0);
        saveButton.setActionCommand("Save");
        saveButton.addActionListener(e -> {
            if ("Save".equals(e.getActionCommand())) {
                onSave();
            }
        });
        consoleIpField.setText(settingsService.getSetting(SettingsService.consoleIp));
        String savedConnectionType = settingsService.getSetting(SettingsService.connectionType);
        if (savedConnectionType != null) {
            if (savedConnectionType.equals("DOLPHIN")) {
                connectionTypeSelection.setSelectedIndex(0);
            } else {
                connectionTypeSelection.setSelectedIndex(1);
            }
        }
        String integrationEnabled = settingsService.getSetting(SettingsService.externalIntegration);
        if (integrationEnabled != null) {
            enableExternalIntegration.setSelected(Boolean.parseBoolean(integrationEnabled));
        }
    }

    private void onSave() {
        String consoleAddress = consoleIpField.getText().trim();
        Boolean externalIntegration = enableExternalIntegration.isSelected();
        log.debug("Currently Selected Item: " + connectionTypeSelection.getSelectedItem().toString());
        var adapterType = Objects.equals(connectionTypeSelection.getSelectedItem().toString().trim(), "Dolphin") ? CreateMemoryAdapterEvent.MemoryAdapterType.DOLPHIN : CreateMemoryAdapterEvent.MemoryAdapterType.NINTENDONT;
        applicationEventPublisher.publishEvent(new SettingsChangeEvent(adapterType, consoleAddress, externalIntegration));
        parentFrame.dispose();
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        parentPanel = new JPanel();
        parentPanel.setLayout(new GridLayoutManager(3, 3, new Insets(5, 5, 5, 5), -1, -1));
        parentPanel.add(connectionTypeSelection, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        consoleIpField = new JTextField();
        parentPanel.add(consoleIpField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        consoleIp = new JLabel();
        consoleIp.setText("Console IP  Address");
        parentPanel.add(consoleIp, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        connectionType = new JLabel();
        connectionType.setText("Connection Type");
        parentPanel.add(connectionType, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        enableExternalIntegration = new JCheckBox();
        enableExternalIntegration.setText("Enable Coop Tracker Updates");
        parentPanel.add(enableExternalIntegration, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        saveButton = new JButton();
        saveButton.setText("Save");
        parentPanel.add(saveButton, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return parentPanel;
    }

    private void createUIComponents() {
        connectionTypeSelection = new JComboBox<>(new String[]{"Dolphin", "Nintendont"});
    }
}
