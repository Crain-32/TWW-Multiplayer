package client.game.data;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;

import java.util.Arrays;
import java.util.Objects;

@Slf4j
@Getter
public enum ChartInfo {
    SUBMARINE_CHART(0XC2, 0x803C4CE0, 0x10000000),
    BEEDLES_CHART(0XC3, 0x803C4CE0, 0x08000000),
    PLATFORM_CHART(0XC4, 0x803C4CE0, 0x04000000),
    LIGHT_RING_CHART(0XC5, 0x803C4CE0, 0x02000000),
    SECRET_CAVE_CHART(0XC6, 0x803C4CE0, 0x01000000),
    SEA_HEARTS_CHART(0XC7, 0x803C4CE0, 0x00800000),
    ISLAND_HEARTS_CHART(0XC8, 0x803C4CE0, 0x00400000),
    GREAT_FAIRY_CHART(0XC9, 0x803C4CE0, 0x00200000),
    OCTO_CHART(0XCA, 0x803C4CE0, 0x00100000),
    IN_CREDIBLE_CHART(0XCB, 0x803C4CE0, 0x00080000),
    TREASURE_CHART_SEVEN(0XCC, 0x803C4CE0, 0x00040000),
    TREASURE_CHART_TWENTY_SEVEN(0XCD, 0x803C4CE0, 0x00020000),
    TREASURE_CHART_TWENTY_ONE(0XCE, 0x803C4CE0, 0x00010000),
    TREASURE_CHART_THIRTEEN(0XCF, 0x803C4CE0, 0x00008000),
    TREASURE_CHART_THIRTY_TWO(0XD0, 0x803C4CE0, 0x00004000),
    TREASURE_CHART_NINETEEN(0XD1, 0x803C4CE0, 0x00002000),
    TREASURE_CHART_FORTY_ONE(0XD2, 0x803C4CE0, 0x00001000),
    TREASURE_CHART_TWENTY_SIX(0XD3, 0x803C4CE0, 0x00000800),
    TREASURE_CHART_EIGHT(0XD4, 0x803C4CE0, 0x00000400),
    TREASURE_CHART_THIRTY_SEVEN(0XD5, 0x803C4CE0, 0x00000200),
    TREASURE_CHART_TWENTY_FIVE(0XD6, 0x803C4CE0, 0x00000100),
    TREASURE_CHART_SEVENTEEN(0XD7, 0x803C4CE0, 0x00000080),
    TREASURE_CHART_THIRTY_SIX(0XD8, 0x803C4CE0, 0x00000040),
    TREASURE_CHART_TWENTY_TWO(0XD9, 0x803C4CE0, 0x00000020),
    TREASURE_CHART_NINE(0XDA, 0x803C4CE0, 0x00000010),
    GHOST_SHIP_CHART(0XDB, 0x803C4CE0, 0x00000008),
    TINGLES_CHART(0XDC, 0x803C4CE0, 0x00000004),
    TREASURE_CHART_FOURTEEN(0XDD, 0x803C4CE0, 0x00000002),
    TREASURE_CHART_TEN(0XDE, 0x803C4CE0, 0x00000001),
    TREASURE_CHART_FORTY(0XDF, 0x803C4CDC, 0x80000000),
    TREASURE_CHART_THREE(0XE0, 0x803C4CDC, 0x40000000),
    TREASURE_CHART_FOUR(0XE1, 0x803C4CDC, 0x20000000),
    TREASURE_CHART_TWENTY_EIGHT(0XE2, 0x803C4CDC, 0x10000000),
    TREASURE_CHART_SIXTEEN(0XE3, 0x803C4CDC, 0x08000000),
    TREASURE_CHART_EIGHTEEN(0XE4, 0x803C4CDC, 0x04000000),
    TREASURE_CHART_THIRTY_FOUR(0XE5, 0x803C4CDC, 0x02000000),
    TREASURE_CHART_TWENTY_NINE(0XE6, 0x803C4CDC, 0x01000000),
    TREASURE_CHART_ONE(0XE7, 0x803C4CDC, 0x00800000),
    TREASURE_CHART_THIRTY_FIVE(0XE8, 0x803C4CDC, 0x00400000),
    TREASURE_CHART_TWELVE(0XE9, 0x803C4CDC, 0x00200000),
    TREASURE_CHART_SIX(0XEA, 0x803C4CDC, 0x00100000),
    TREASURE_CHART_TWENTY_FOUR(0XEB, 0x803C4CDC, 0x00080000),
    TREASURE_CHART_THIRTY_NINE(0XEC, 0x803C4CDC, 0x00040000),
    TREASURE_CHART_THIRTY_EIGHT(0XED, 0x803C4CDC, 0x00020000),
    TREASURE_CHART_TWO(0XEE, 0x803C4CDC, 0x00010000),
    TREASURE_CHART_THIRTY_THREE(0XEF, 0x803C4CDC, 0x00008000),
    TREASURE_CHART_THIRTY_ONE(0XF0, 0x803C4CDC, 0x00004000),
    TREASURE_CHART_TWENTY_THREE(0XF1, 0x803C4CDC, 0x00002000),
    TREASURE_CHART_FIVE(0XF2, 0x803C4CDC, 0x00001000),
    TREASURE_CHART_TWENTY(0XF3, 0x803C4CDC, 0x00000800),
    TREASURE_CHART_THIRTY(0XF4, 0x803C4CDC, 0x00000400),
    TREASURE_CHART_FIFTEEN(0XF5, 0x803C4CDC, 0x00000200),
    TREASURE_CHART_ELEVEN(0XF6, 0x803C4CDC, 0x00000100),
    TRIFORCE_CHART_EIGHT(0XF7, 0x803C4CDC, 0x00000080),
    TRIFORCE_CHART_SEVEN(0XF8, 0x803C4CDC, 0x00000040),
    TRIFORCE_CHART_SIX(0XF9, 0x803C4CDC, 0x00000020),
    TRIFORCE_CHART_FIVE(0XFA, 0x803C4CDC, 0x00000010),
    TRIFORCE_CHART_FOUR(0XFB, 0x803C4CDC, 0x00000008),
    TRIFORCE_CHART_THREE(0XFC, 0x803C4CDC, 0x00000004),
    TRIFORCE_CHART_TWO(0XFD, 0x803C4CDC, 0x00000002),
    TRIFORCE_CHART_ONE(0XFE, 0x803C4CDC, 0x00000001);

    private final Byte itemId;
    private final Integer consoleAddress;
    private final Integer mask;

    ChartInfo(int itemId, Integer consoleAddress, Integer mask) {
        this.itemId = (byte) itemId;
        this.consoleAddress = consoleAddress;
        this.mask = mask;
    }

    public static ChartInfo fromItemId(Byte itemId) {
        log.trace("Checking for Item ID: {}", itemId);
        return Arrays.stream(ChartInfo.values())
                .filter(chart -> Objects.equals(chart.getItemId(), itemId))
                .findFirst()
                .orElseThrow(() -> new IllegalArgumentException("The Provided Item Id is not a chart"));
    }

    public static ChartInfo fromItemInfo(ItemInfo info) {
        return fromItemId(info.getItemId());
    }
}
